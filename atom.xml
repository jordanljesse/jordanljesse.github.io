<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jordan Learns Code]]></title>
  <link href="http://jordanljesse.github.io/atom.xml" rel="self"/>
  <link href="http://jordanljesse.github.io/"/>
  <updated>2017-11-08T20:14:40-08:00</updated>
  <id>http://jordanljesse.github.io/</id>
  <author>
    <name><![CDATA[Jordan Jesse]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Day 33 Check In]]></title>
    <link href="http://jordanljesse.github.io/blog/2017/11/08/day-33-check-in/"/>
    <updated>2017-11-08T21:56:08-05:00</updated>
    <id>http://jordanljesse.github.io/blog/2017/11/08/day-33-check-in</id>
    <content type="html"><![CDATA[<p>A recent alumni that just got hired at an extremely desireable company with offices in Santa Monica came by to talk with my class about his job hunting experience and to answer some our questions. The visit was inspiring and a little anxiety inducing at the stame time; the former because it was great to hear a (mostly)self-taught developer success story and the latter because it reminded me of how much there is out there I just don’t know yet.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 32 Check In]]></title>
    <link href="http://jordanljesse.github.io/blog/2017/11/07/day-32-check-in/"/>
    <updated>2017-11-07T21:56:08-05:00</updated>
    <id>http://jordanljesse.github.io/blog/2017/11/07/day-32-check-in</id>
    <content type="html"><![CDATA[<p>I struggled with my health today and as a result I wasn’t able to write as much code as I would have liked. I’m going to make this evening about self-care so that I can get back on top of my feature tomorrow.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Collections in C#]]></title>
    <link href="http://jordanljesse.github.io/blog/2017/11/07/collections-in-c-sharp/"/>
    <updated>2017-11-07T11:47:34-05:00</updated>
    <id>http://jordanljesse.github.io/blog/2017/11/07/collections-in-c-sharp</id>
    <content type="html"><![CDATA[<p>When you want to keep track of a group of objects in C#, you can do so by either creating arrays of objects or collections of objects. Collections offer a more flexible way of storing and referencing groups of objects compared to the fixed size and data type of arrays. The following is a brief overview of a few of the collections available in C# and their properties.<!--more--></p>

<h3 id="array">Array</h3>
<ul>
  <li>fixed size</li>
  <li>single datatype</li>
  <li>accessed using square brackets</li>
</ul>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="csharp"><span class="line"><span class="kt">int</span><span class="p">[]</span> <span class="n">numbers</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="m">5</span><span class="p">];</span>
</span><span class="line">
</span><span class="line"><span class="n">numbers</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span>
</span><span class="line"><span class="n">numbers</span><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="p">=</span> <span class="m">2</span><span class="p">;</span>
</span><span class="line"><span class="n">numbers</span><span class="p">[</span><span class="m">2</span><span class="p">]</span> <span class="p">=</span> <span class="m">3</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">foreach</span> <span class="p">(</span><span class="kt">int</span> <span class="n">n</span> <span class="k">in</span> <span class="n">numbers</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">n</span><span class="p">);</span> <span class="c1">// 1, 2, 3, 0, 0</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="list">List</h3>
<ul>
  <li>variable size</li>
  <li>single datatype</li>
  <li>provides methods for searching, sorting, and modifying data</li>
</ul>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="csharp"><span class="line"><span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">numbers</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;();</span>
</span><span class="line">
</span><span class="line"><span class="n">numbers</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="m">100</span><span class="p">);</span>
</span><span class="line"><span class="n">numbers</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="m">101</span><span class="p">);</span>
</span><span class="line"><span class="n">numbers</span><span class="p">.</span><span class="n">Insert</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">99</span><span class="p">);</span> <span class="c1">// add 99 to start of List</span>
</span><span class="line">
</span><span class="line"><span class="k">foreach</span> <span class="p">(</span><span class="kt">int</span> <span class="n">n</span> <span class="k">in</span> <span class="n">numbers</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">n</span><span class="p">);</span> <span class="c1">// 99, 100, 101</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="queue">Queue</h3>
<ul>
  <li>first in first out(FIFO)</li>
</ul>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="csharp"><span class="line"><span class="n">Queue</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">numbers</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Queue</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;();</span>
</span><span class="line">
</span><span class="line"><span class="n">numbers</span><span class="p">.</span><span class="n">Enqueue</span><span class="p">(</span><span class="m">5</span><span class="p">);</span>
</span><span class="line"><span class="n">numbers</span><span class="p">.</span><span class="n">Enqueue</span><span class="p">(</span><span class="m">6</span><span class="p">);</span>
</span><span class="line"><span class="n">numbers</span><span class="p">.</span><span class="n">Enqueue</span><span class="p">(</span><span class="m">7</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="k">while</span> <span class="p">(</span><span class="n">numbers</span><span class="p">.</span><span class="n">Count</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">n</span> <span class="p">=</span> <span class="n">numbers</span><span class="p">.</span><span class="n">Dequeue</span><span class="p">;</span> <span class="c1">// removes things from the queue during iteration</span>
</span><span class="line">    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">n</span><span class="p">);</span> <span class="c1">// 5, 6, 7</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="stack">Stack</h3>
<ul>
  <li>first in last out(LIFO)</li>
</ul>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="csharp"><span class="line"><span class="n">Stack</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">numbers</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Stack</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="set">Set</h3>
<ul>
  <li>data structure that does not allow duplicates</li>
</ul>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="csharp"><span class="line"><span class="kt">var</span> <span class="n">numbers</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[]</span> <span class="p">{</span> <span class="m">101</span><span class="p">,</span> <span class="m">102</span><span class="p">,</span> <span class="m">103</span><span class="p">,</span> <span class="m">101</span><span class="p">,</span> <span class="m">104</span><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="n">HashSet</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">seen</span> <span class="p">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;();</span>
</span><span class="line">
</span><span class="line"><span class="k">foreach</span> <span class="p">(</span><span class="kt">int</span> <span class="n">n</span> <span class="k">in</span> <span class="n">numbers</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">seen</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="err">$</span><span class="s">&quot;{n} is new.&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="err">$</span><span class="s">&quot;Already saw {n}.&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="c1">// 101 is new.</span>
</span><span class="line"><span class="c1">// 102 is new.</span>
</span><span class="line"><span class="c1">// 103 is new.</span>
</span><span class="line"><span class="c1">// Already saw 101.</span>
</span><span class="line"><span class="c1">// 104 is new.</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="dictionary">Dictionary</h3>
<ul>
  <li>all about key/value pairs</li>
  <li>organized by key</li>
  <li>not good for searching right to left(looking up names by phone numbers)</li>
</ul>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="csharp"><span class="line"><span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;</span> <span class="n">phoneNumbers</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;();</span>
</span><span class="line">
</span><span class="line"><span class="n">phoneNumbers</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;Dan&quot;</span><span class="p">,</span> <span class="s">&quot;555-310-2345&quot;</span><span class="p">);</span>
</span><span class="line"><span class="n">phoneNumbers</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;Joe&quot;</span><span class="p">,</span> <span class="s">&quot;345-234-2340&quot;</span><span class="p">);</span>
</span><span class="line"><span class="n">phoneNumbers</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;Johnny&quot;</span><span class="p">,</span> <span class="s">&quot;123-432-9834&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">phoneNumbers</span><span class="p">[</span><span class="s">&quot;Dan&quot;</span><span class="p">]);</span> <span class="c1">// 555-310-2345</span>
</span><span class="line"><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">phoneNumbers</span><span class="p">[</span><span class="s">&quot;Steven&quot;</span><span class="p">]);</span> <span class="c1">// throws an exception</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="arraylist">ArrayList</h3>
<ul>
  <li>do not use</li>
  <li>lots of extra pointers</li>
  <li>relatively slow</li>
  <li>no specific size</li>
  <li>stores everything as an object</li>
  <li>defeats purpose of strong-typing</li>
  <li>equivalent of a JavaScript array(undesirable in C#)</li>
</ul>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="csharp"><span class="line"><span class="n">ArrayList</span> <span class="n">arrList</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="p">();</span>
</span><span class="line"><span class="n">arrList</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="m">100</span><span class="p">);</span>
</span><span class="line"><span class="n">arrList</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="m">101</span><span class="p">);</span>
</span><span class="line"><span class="n">arrList</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">n</span> <span class="p">=</span> <span class="n">arrList</span><span class="p">[</span><span class="m">0</span><span class="p">];</span> <span class="c1">// Cannot implicitly convert type &#39;object&#39; to &#39;int&#39;</span>
</span><span class="line"><span class="kt">int</span> <span class="n">n</span> <span class="p">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">arrList</span><span class="p">[</span><span class="m">0</span><span class="p">];</span> <span class="c1">// n = 100</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="hashtable">HashTable</h3>
<ul>
  <li>do not use</li>
  <li>legacy</li>
  <li>similar to ArrayList except key/value pairs instead of indexed</li>
</ul>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="csharp"><span class="line"><span class="n">Hashtable</span> <span class="n">ht</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Hashtable</span><span class="p">();</span>
</span><span class="line">
</span><span class="line"><span class="n">ht</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;Dan&quot;</span><span class="p">,</span> <span class="s">&quot;555-234-2478&quot;</span><span class="p">);</span>
</span><span class="line"><span class="n">ht</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;123&quot;</span><span class="p">,</span> <span class="s">&quot;555-234-2478&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 31 Check In]]></title>
    <link href="http://jordanljesse.github.io/blog/2017/11/06/day-31-check-in/"/>
    <updated>2017-11-06T23:04:19-05:00</updated>
    <id>http://jordanljesse.github.io/blog/2017/11/06/day-31-check-in</id>
    <content type="html"><![CDATA[<p>I feel like my learning approach for the last few months has been breadth before depth and lately I’ve been wanting to take a few days to dive deeply into a few areas that I feel need bolstering, like currying and recursion.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 30 Check In]]></title>
    <link href="http://jordanljesse.github.io/blog/2017/11/04/day-30-check-in/"/>
    <updated>2017-11-04T20:29:10-05:00</updated>
    <id>http://jordanljesse.github.io/blog/2017/11/04/day-30-check-in</id>
    <content type="html"><![CDATA[<p>Saturdays in Los Angeles are amazing. Farmer’s markets, no traffic, and almost always perfect weather. I spent most of the day designing a user selectable theme feature for the open source logging tool we’re building, along with a dark themed UI. I was glad to have an opportunity to dig into CSS animations after listing to <a href="http://rachelnabors.com">Rachel Nabors</a> on the <a href="https://www.codenewbie.org/podcast/what-and-why-is-web-animation">Code Newbie</a> podcast(highly recommended).<!--more--></p>

<p>I was trying to survive traffic on the 405 when something Nabors said jumped out at me: <em>perceived</em> load time is more important than <em>actual</em> load time. I had never thought about how the user actually perceives the load time of something when I’m looking at benchmark metrics for a website; it turns out those metrics don’t tell the whole story. As a result, my plan is to incorporate some of Nabors ideas from the podcast into this open source note taking tool in the hopes that it will ease the cognitive load of the user and take some of the <em>friction</em> out of note taking.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 29 Check In]]></title>
    <link href="http://jordanljesse.github.io/blog/2017/11/03/day-29-check-in/"/>
    <updated>2017-11-03T23:45:32-05:00</updated>
    <id>http://jordanljesse.github.io/blog/2017/11/03/day-29-check-in</id>
    <content type="html"><![CDATA[<p>Today was demo day for a couple cohorts that are ahead of us. I’m always amazed at the amount of features that each cohort is able to cram into their app in the short amount of time they have to work on it. It’s simultaneously inspiring and intimidating to see how high the bar is here at Sabio.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 28 Check In]]></title>
    <link href="http://jordanljesse.github.io/blog/2017/11/02/day-28-check-in/"/>
    <updated>2017-11-02T22:27:17-05:00</updated>
    <id>http://jordanljesse.github.io/blog/2017/11/02/day-28-check-in</id>
    <content type="html"><![CDATA[<p>We had a substitute instructor today, which turned out to be pretty cool because our sub specialized in a different stack(Node.js) than our own(.NET), so we got exposed to some new ways of doing things. I started <em>and</em> finished a component today that crawls the IndexdDB and exports all of the notes it contains as JSON and vice versa(import JSON as notes in IndexedDB).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 27 Check In]]></title>
    <link href="http://jordanljesse.github.io/blog/2017/11/01/day-27-check-in/"/>
    <updated>2017-11-01T23:46:52-05:00</updated>
    <id>http://jordanljesse.github.io/blog/2017/11/01/day-27-check-in</id>
    <content type="html"><![CDATA[<p>Cleaning up the git branch for the markdown note editor I made yesterday so I can submit a pull request today. It looks like the next feature I’ve got to build involves importing and exporting notes as JSON and using GUID’s to keep track of notes that might contain duplicate id’s on the server.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 26 Check In]]></title>
    <link href="http://jordanljesse.github.io/blog/2017/10/31/day-26-check-in/"/>
    <updated>2017-10-31T23:46:52-05:00</updated>
    <id>http://jordanljesse.github.io/blog/2017/10/31/day-26-check-in</id>
    <content type="html"><![CDATA[<p>It rained in Los Angeles this morning! Somehow, rain in LA affects drivers like snow does in Kansas; so strange. We got introduced to IndexedDB this morning which seems like a clever way of storing things locally in the user’s browser(instead of a database). This afternoon I <em>finally</em> finished up the markdown editor for notes I’ve been working on the last few days! I’m hoping to move on to a feature that utilizes <a href="https://d3js.org">D3.js</a> as I’ve got a personal project I think would really benefit from data visualization.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dirty Checking vs. VDOM]]></title>
    <link href="http://jordanljesse.github.io/blog/2017/10/31/dirty-checking-vs-vdom/"/>
    <updated>2017-10-31T14:50:12-05:00</updated>
    <id>http://jordanljesse.github.io/blog/2017/10/31/dirty-checking-vs-vdom</id>
    <content type="html"><![CDATA[<p>What is the difference between updating the DOM using dirty checking and VDOM manipulation? Is one more efficient than the other? What the heck <em>is</em> the DOM? Let’s try to answer these questions!<!--more--></p>

<h3 id="what-is-the-dom">What is the DOM?</h3>
<p>To understand the differences between dirty checking and VDOM manipulation we first need to understand what the DOM is and isn’t.</p>

<h5 id="the-dom-is">The DOM is:</h5>
<ul>
  <li>a programming interface for HTML and XML documents</li>
  <li>an object-oriented representation of the HTML we wrote made up of nodes and objects</li>
  <li>automatically created from the HTML we wrote by the browser</li>
</ul>

<h5 id="the-dom-is-not">The DOM is not:</h5>
<ul>
  <li>the actual HTML we wrote</li>
  <li>the markup we see when we choose ‘view source’ on a page</li>
  <li>always the same as our HTML(browsers sometimes fix invalid markup behind the scenes)</li>
</ul>

<p>The DOM can be manipulated and edited using a scripting language like JavaScript including libraries and frameworks such as jQuery, Angular, and React. In fact, the DOM actually has its own API for interacting with other bits of code. Much of what is thought of as a “JavaScript thing” is actually a DOM API feature that allows us to interact with the DOM.</p>

<h3 id="dirty-checking">Dirty Checking</h3>
<p>Dirty checking is when our code loops through all of the node’s data at regular intervals for changes. It’s an inefficient way to update DOM elements as it requires recursively traversing every single node in the DOM to see if the node’s data is “dirty”(been changed). Compared to “Observable Checking”, where the individual components are responsible for listening to when changes take place in the state and communicating those changes, dirty checking is slow. A good example of this slowness would be updating a <code>li</code> in an unordered list: when dirty checking discovers the updated <code>li</code> it will actually re-render the entire unordered list; a very ineffecient operation.</p>

<h3 id="the-virtual-dom">The Virtual DOM</h3>
<p>The virtual DOM, or VDOM, is an abstraction of the DOM that is lightweight and can be updated without affecting the actual DOM. It has all of the same nodes, objects, and properties as the real DOM except without the ability to write to the screen. It’s worth noting that a new VDOM is created after every re-render of the UI. When using React a snapshot is made of the VDOM before applying any updates and this snapshot is used to compare against an updated VDOM. By comparing and contrasting the VDOM snapshot with the updated VDOM React is able to update only those elements that have been changed. Unlike the dirty checking example previously mentioned, VDOM manipulation will only update the node that’s been changed <em>without</em> having to update its parent element or containing list. This is what makes VDOM manipulation faster and more efficient than dirty checking.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 25 Check In]]></title>
    <link href="http://jordanljesse.github.io/blog/2017/10/30/day-25-check-in/"/>
    <updated>2017-10-30T23:46:52-05:00</updated>
    <id>http://jordanljesse.github.io/blog/2017/10/30/day-25-check-in</id>
    <content type="html"><![CDATA[<p>I had an idea for an app last night that I really want to build, so I’m using it as an excuse to run through making a full stack CRUD app again with Angular/.NET/SQL. It’s a web app to help new social workers track the hours required for their licensure. After hearing a few social workers frustrated with the process of tracking their hours it seemed like an app that could store the hours and return some meaningful analysis to the user would be the way forward - certainly more convenient than an Excel spreadsheet.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 24 Check In]]></title>
    <link href="http://jordanljesse.github.io/blog/2017/10/28/day-24-check-in/"/>
    <updated>2017-10-28T22:23:39-05:00</updated>
    <id>http://jordanljesse.github.io/blog/2017/10/28/day-24-check-in</id>
    <content type="html"><![CDATA[<p>I’m working on a new feature that involves building a custom tag in Angular that incorporates an open source project. I’ve made a personal goal of solving a new algorithm challenge on <a href="https://www.hackerrank.com">Hacker Rank</a> every day for the rest of this year. We’ll see how it goes!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 23 Check In]]></title>
    <link href="http://jordanljesse.github.io/blog/2017/10/27/day-23-check-in/"/>
    <updated>2017-10-27T21:40:04-05:00</updated>
    <id>http://jordanljesse.github.io/blog/2017/10/27/day-23-check-in</id>
    <content type="html"><![CDATA[<p>Today we learned more about data structures, binary trees, and how to traverse a binary tree using recursion. I’d always perceived binary trees as some scary part of the interview process based off of the complaints of tech interviewees on social media, however they didn’t seem that complex and traversal via recursion made really good sense.<!--more--></p>

<p>Additionally, today I learned that if you want a little green square to show up on your GitHub commit graph that your name and email, specifically the email you login to GitHub with, need to be configured in git. Good to know!</p>

<h3 id="binary-tree-traversal-via-recursion">Binary Tree Traversal Via Recursion</h3>

<h5 id="preorder">Preorder</h5>
<ul>
  <li>node(contains contents, left child, and right child)</li>
  <li>traversal function uses recursion</li>
  <li>print the parents before the children</li>
</ul>

<h5 id="postorder">Postorder</h5>
<ul>
  <li>print the children before printing the parents</li>
</ul>

<h5 id="inorder">Inorder</h5>
<ul>
  <li>print the left child, print the parent, then print the right child</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 22 Check In]]></title>
    <link href="http://jordanljesse.github.io/blog/2017/10/26/day-22-check-in/"/>
    <updated>2017-10-26T21:40:04-05:00</updated>
    <id>http://jordanljesse.github.io/blog/2017/10/26/day-22-check-in</id>
    <content type="html"><![CDATA[<p>Today we got into the nuts and bolts of how to build custom tags and components in AngularJS, data binding characters to be used with custom directives, and how more on handling git merge conflicts. Additionally, I <em>finally</em> figured out how to handle salting a SHA1 hashed password and validating the user login and registration, subsequently returning a cookie to the logged in user!<!--more--></p>

<h3 id="data-binding-characters-in-angular">Data Binding Characters in Angular</h3>
<ul>
  <li><code>&lt;</code> one-way data binding</li>
  <li><code>=</code> two-way data binding</li>
  <li><code>@</code> access a string value passed into a directive</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 21 Check In]]></title>
    <link href="http://jordanljesse.github.io/blog/2017/10/25/day-21-check-in/"/>
    <updated>2017-10-25T22:05:24-05:00</updated>
    <id>http://jordanljesse.github.io/blog/2017/10/25/day-21-check-in</id>
    <content type="html"><![CDATA[<p>Today was a blur. I continued to build the registration and login feature for this app with Angular and .NET. I gave my first code talk tonight; it was about what vim is and why you would want to use it(because you value time and efficiency!). I thought it was Thursday all day and it’s actually Wednesday; it’s been one of <em>those</em> weeks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 20 Check In]]></title>
    <link href="http://jordanljesse.github.io/blog/2017/10/24/day-20-check-in/"/>
    <updated>2017-10-24T23:27:24-05:00</updated>
    <id>http://jordanljesse.github.io/blog/2017/10/24/day-20-check-in</id>
    <content type="html"><![CDATA[<p>Holy smokes. Today I <em>finally</em> completed my two full stack components, however I’ve said that at standup for the last week it seems, so my ability to predict when something will be “done” needs work. I’m excited to start working on my assigned feature for this for-developers logging tool, the user registration/login, mostly because with all the news lately(Equifax) I’d like to learn more about seurity and things to be aware of.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 19 Check In]]></title>
    <link href="http://jordanljesse.github.io/blog/2017/10/23/day-19-check-in/"/>
    <updated>2017-10-23T22:01:14-05:00</updated>
    <id>http://jordanljesse.github.io/blog/2017/10/23/day-19-check-in</id>
    <content type="html"><![CDATA[<p>I spent most of my day ‘off’ yesterday building a web app that can get the user’s location data and return the local weather using the Weather Underground API and the <code>navigator.geolocation</code> API built into HTML5. I learned a lot about SSL, HTTPS, and ports 443/80 while attempting(the operative word here) to securely retrieve and transmit the user’s location. You can check out my little weather API experiment <a href="http://codepen.io/jljesse/pen/LzvoJq">here</a>. Additionally, I’m trying to be better about digging into the call stack when I’m debugging; it’s a really helpful tool.<!--more--></p>

<p>I learned a small amount about cryptography and how writing your own crypto can be dangerous. With that in mind, my goal is to implement the salting and hashing of the user’s password by stitching together preexisting crypto libraries with a minimum of my own code. Bonus round: today I learned that encryption != hashing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 18 Check In]]></title>
    <link href="http://jordanljesse.github.io/blog/2017/10/21/day-18-check-in/"/>
    <updated>2017-10-21T22:01:14-05:00</updated>
    <id>http://jordanljesse.github.io/blog/2017/10/21/day-18-check-in</id>
    <content type="html"><![CDATA[<p>This morning was rough; I felt like I wrote more bugs than functioning code. I’m trying to encrypt the user’s password before it is sent to the server and ran into some trouble with the <code>salt</code> portion of the encryption. Nevertheless, I’m getting more confident in my ability to debug things, knowing which tools to use, and how to follow the flow of data through my application from the user’s input on the front end to the database in the back end. By the late evening, I had my second component mostly complete and felt like I was able to learn from most of this morning’s missteps.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 17 Check In]]></title>
    <link href="http://jordanljesse.github.io/blog/2017/10/20/day-17-check-in/"/>
    <updated>2017-10-20T22:51:37-05:00</updated>
    <id>http://jordanljesse.github.io/blog/2017/10/20/day-17-check-in</id>
    <content type="html"><![CDATA[<p>I started working on my second component today and it was different from the first in that it already contained a bunch of code that I had to work around, which provided some extra challenges. The main thing I learned about today was encryption and how to apply it to a user’s password; trying to handle the password so that it’s secure is tricky business however I enjoy the challenge.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 16 Check In]]></title>
    <link href="http://jordanljesse.github.io/blog/2017/10/19/day-16-check-in/"/>
    <updated>2017-10-19T23:23:45-05:00</updated>
    <id>http://jordanljesse.github.io/blog/2017/10/19/day-16-check-in</id>
    <content type="html"><![CDATA[<p>So I thought I finished my full stack component yesterday, however I added some validation to the API I wrote with C#… and it broke. As a result, today I learned how to troubleshoot the Unity framework configuration, how to implement validation on the server(as opposed to client side), and how to improve my debugging by digging into the call stack.</p>
]]></content>
  </entry>
  
</feed>
