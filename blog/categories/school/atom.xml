<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: School | Jordan Learns Code]]></title>
  <link href="http://jordanljesse.github.io/blog/categories/school/atom.xml" rel="self"/>
  <link href="http://jordanljesse.github.io/"/>
  <updated>2017-10-31T13:55:11-07:00</updated>
  <id>http://jordanljesse.github.io/</id>
  <author>
    <name><![CDATA[Jordan Jesse]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dirty Checking vs. VDOM]]></title>
    <link href="http://jordanljesse.github.io/blog/2017/10/31/dirty-checking-vs-vdom/"/>
    <updated>2017-10-31T14:50:12-05:00</updated>
    <id>http://jordanljesse.github.io/blog/2017/10/31/dirty-checking-vs-vdom</id>
    <content type="html"><![CDATA[<p>What is the difference between updating the DOM using dirty checking and VDOM manipulation? Is one more efficient than the other? What the heck <em>is</em> the DOM? Let’s try to answer these questions!<!--more--></p>

<h3 id="what-is-the-dom">What is the DOM?</h3>
<p>To understand the differences between dirty checking and VDOM manipulation we first need to understand what the DOM is and isn’t.</p>

<h5 id="the-dom-is">The DOM is:</h5>
<ul>
  <li>a programming interface for HTML and XML documents</li>
  <li>an object-oriented representation of the HTML we wrote made up of nodes and objects</li>
  <li>automatically created from the HTML we wrote by the browser</li>
</ul>

<h5 id="the-dom-is-not">The DOM is not:</h5>
<ul>
  <li>the actual HTML we wrote</li>
  <li>the markup we see when we choose ‘view source’ on a page</li>
  <li>always the same as our HTML(browsers sometimes fix invalid markup behind the scenes)</li>
</ul>

<p>The DOM can be manipulated and edited using a scripting language like JavaScript including libraries and frameworks such as jQuery, Angular, and React. In fact, the DOM actually has its own API for interacting with other bits of code. Much of what is thought of as a “JavaScript thing” is actually a DOM API feature that allows us to interact with the DOM.</p>

<h3 id="dirty-checking">Dirty Checking</h3>
<p>Dirty checking is when our code checks all of the node’s data at regular intervals for changes, like a loop(because it <em>is</em> a loop). It’s an inefficient way to update DOM elements as it requires recursively traversing every single node in the DOM to see if the node’s data is “dirty”(it’s been changed). Compared to “Observable Checking”, where the individual components are responsible for listening to when changes take place in the state and communicating those changes, dirty checking is slow. A good example of this slowness would be updating a <code>li</code> in an unordered list: when dirty checking discovers the updated <code>li</code> it will actually re-render the entire unordered list; a very ineffecient operation.</p>

<h3 id="the-virtual-dom">The Virtual DOM</h3>
<p>The virtual DOM, or VDOM, is an abstraction of the DOM that is lightweight and can be updated without affecting the actual DOM. It has all of the same nodes, objects, and properties as the real DOM except without the ability to write to the screen. It’s worth noting that a new VDOM is created after every re-render of the UI. When using React a snapshot is made of the VDOM before applying any updates and this snapshot is used to compare against an updated VDOM. By comparing and contrasting the VDOM snapshot with the updated VDOM React is able to update only those elements that have been changed. Unlike the dirty checking example previously mentioned, VDOM manipulation will only update the node that’s been changed <em>without</em> having to update it’s parent element or containing list. This is what makes VDOM manipulation faster and more efficient than dirty checking.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 25 Check In]]></title>
    <link href="http://jordanljesse.github.io/blog/2017/10/30/day-25-check-in/"/>
    <updated>2017-10-30T23:46:52-05:00</updated>
    <id>http://jordanljesse.github.io/blog/2017/10/30/day-25-check-in</id>
    <content type="html"><![CDATA[<p>I had an idea for an app last night that I really want to build, so I’m using it as an excuse to run through making a full stack CRUD app again with Angular/.NET/SQL. It’s a web app to help unlicensed social workers track the hours required for their licensure. After hearing a few social workers frustrated with the process of tracking their hours it seemed like an app that could store the hours and return some meaningful analysis to the user would be the way forward - certainly more convenient than an Excel spreadsheet.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 24 Check In]]></title>
    <link href="http://jordanljesse.github.io/blog/2017/10/28/day-24-check-in/"/>
    <updated>2017-10-28T22:23:39-05:00</updated>
    <id>http://jordanljesse.github.io/blog/2017/10/28/day-24-check-in</id>
    <content type="html"><![CDATA[<p>I’m working on a new feature that involves building a custom tag in Angular that incorporates an open source project. I’ve made a personal goal of solving a new algorithm challenge on <a href="https://www.hackerrank.com">Hacker Rank</a> every day for the rest of this year. We’ll see how it goes!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 23 Check In]]></title>
    <link href="http://jordanljesse.github.io/blog/2017/10/27/day-23-check-in/"/>
    <updated>2017-10-27T21:40:04-05:00</updated>
    <id>http://jordanljesse.github.io/blog/2017/10/27/day-23-check-in</id>
    <content type="html"><![CDATA[<p>Today we learned more about data structures, binary trees, and how to traverse a binary tree using recursion. I’d always perceived binary trees as some scary part of the interview process based off of the complaints of tech interviewees, however they didn’t seem that complex and traversal via recursion made really good sense.<!--more--></p>

<p>Additionally, today I learned that if you want a little green square to show up on your GitHub commit graph that your name and email, specifically the email you login to GitHub with, need to be configured in git. Good to know!</p>

<h2 id="recursion">Recursion</h2>

<h3 id="binary-tree-traversal">Binary Tree Traversal</h3>

<h5 id="preorder">Preorder</h5>
<ul>
  <li>node(contains contents, left child, and right child)</li>
  <li>traversal function uses recursion</li>
  <li>print the parents before the children</li>
</ul>

<h5 id="postorder">Postorder</h5>
<ul>
  <li>print the children before printing the parents</li>
</ul>

<h5 id="inorder">Inorder</h5>
<ul>
  <li>print the left child, print the parent, then print the right child</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 22 Check In]]></title>
    <link href="http://jordanljesse.github.io/blog/2017/10/26/day-22-check-in/"/>
    <updated>2017-10-26T21:40:04-05:00</updated>
    <id>http://jordanljesse.github.io/blog/2017/10/26/day-22-check-in</id>
    <content type="html"><![CDATA[<p>Today we we got into the nuts and bolts of how to build custom tags and components in AngularJS, data binding characters to be used with custom directives, and how to handle git merge conflicts. Additionally, I <em>finally</em> figured out how to handle salting a SHA1 hashed password and validating the user login and registration, subsequently returning a cookie to the logged in user!<!--more--></p>

<h3 id="data-binding-characters">Data Binding Characters</h3>
<ul>
  <li><code>&lt;</code> one-way data binding</li>
  <li><code>=</code> two-way data binding</li>
  <li><code>@</code> access a string value passed into a directive</li>
</ul>
]]></content>
  </entry>
  
</feed>
