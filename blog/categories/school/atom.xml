<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: School | Jordan Learns Code]]></title>
  <link href="http://jordanljesse.github.io/blog/categories/school/atom.xml" rel="self"/>
  <link href="http://jordanljesse.github.io/"/>
  <updated>2017-10-27T10:39:14-07:00</updated>
  <id>http://jordanljesse.github.io/</id>
  <author>
    <name><![CDATA[Jordan Jesse]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Day 23 Check In]]></title>
    <link href="http://jordanljesse.github.io/blog/2017/10/27/day-23-check-in/"/>
    <updated>2017-10-27T21:40:04-05:00</updated>
    <id>http://jordanljesse.github.io/blog/2017/10/27/day-23-check-in</id>
    <content type="html"><![CDATA[<p>Today we learned more about data structures, binary trees, and how to traverse a binary tree using recursion. I’d always perceived binary trees as some scary part of the interview process based off of the complaints of tech interviewees, however they didn’t seem that complex and traversal via recursion made really good sense.<!--more--></p>

<h2 id="recursion">Recursion</h2>

<h3 id="binary-tree-traversal">Binary Tree Traversal</h3>
<p>##### Preorder
- node(contains contents, left child, and right child)
- traversal function uses recursion
- print the parents before the children</p>

<h5 id="postorder">Postorder</h5>
<ul>
  <li>print the children before printing the parents</li>
</ul>

<h5 id="inorder">Inorder</h5>
<ul>
  <li>print the left child, print the parent, then print the right child</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 22 Check In]]></title>
    <link href="http://jordanljesse.github.io/blog/2017/10/26/day-22-check-in/"/>
    <updated>2017-10-26T21:40:04-05:00</updated>
    <id>http://jordanljesse.github.io/blog/2017/10/26/day-22-check-in</id>
    <content type="html"><![CDATA[<p>Today we we got into the nuts and bolts of how to build custom tags and components in AngularJS, data binding characters to be used with custom directives, and how to handle git merge conflicts. Additionally, I <em>finally</em> figured out how to handle salting a SHA1 hashed password and validating the user login and registration, subsequently returning a cookie to the logged in user!<!--more--></p>

<h3 id="data-binding-characters">Data Binding Characters</h3>
<ul>
  <li><code>&lt;</code> one-way data binding</li>
  <li><code>=</code> two-way data binding</li>
  <li><code>@</code> access a string value passed into a directive</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 21 Check In]]></title>
    <link href="http://jordanljesse.github.io/blog/2017/10/25/day-21-check-in/"/>
    <updated>2017-10-25T22:05:24-05:00</updated>
    <id>http://jordanljesse.github.io/blog/2017/10/25/day-21-check-in</id>
    <content type="html"><![CDATA[<p>Today was a blur. I continued to build the registration and login feature for this app with Angular and .NET. I gave my first code talk tonight; it was about what vim is and why you would want to use it. I thought it was Thursday all day and it’s actually Wednesday; it’s been one of those weeks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 20 Check In]]></title>
    <link href="http://jordanljesse.github.io/blog/2017/10/24/day-20-check-in/"/>
    <updated>2017-10-24T23:27:24-05:00</updated>
    <id>http://jordanljesse.github.io/blog/2017/10/24/day-20-check-in</id>
    <content type="html"><![CDATA[<p>Holy smokes. Today I <em>finally</em> completed my two full stack components, however I’ve said that at standup for the last week it seems, so my ability to predict when something will be “done” needs work. I’m excited to start working on my assigned feature for this techie logging tool, the user registration/login, mostly because with all the news lately(Equifax) I’d like to learn more about seurity and things to be aware of.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 19 Check In]]></title>
    <link href="http://jordanljesse.github.io/blog/2017/10/23/day-19-check-in/"/>
    <updated>2017-10-23T22:01:14-05:00</updated>
    <id>http://jordanljesse.github.io/blog/2017/10/23/day-19-check-in</id>
    <content type="html"><![CDATA[<p>I spent most of my day ‘off’ yesterday building a web app that can get the user’s location data and return the local weather using the Weather Underground API and the <code>navigator.geolocation</code> API built into HTML5. I learned a lot about SSL, HTTPS, and ports 443/80 while attempting(the operative word here) to securely retrieve and transmit the user’s location. You can check out my little weather API experiment <a href="http://codepen.io/jljesse/pen/LzvoJq">here</a>. Additionally, I’m trying to be better about digging into the call stack when I’m debugging; it’s a really helpful tool.<!--more--></p>

<p>I learned a small amount about cryptography and how writing your own crypto can be dangerous. With that in mind, my goal is to implement the salting and hashing of the user’s password by stitching together instructor supplied crypto libraries with a minimum of my own code. Bonus round: today I learned that encryption != hashing.</p>
]]></content>
  </entry>
  
</feed>
