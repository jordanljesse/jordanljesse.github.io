<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: General | Jordan Learns Code]]></title>
  <link href="http://jordanljesse.github.io/blog/categories/general/atom.xml" rel="self"/>
  <link href="http://jordanljesse.github.io/"/>
  <updated>2017-11-17T12:16:07-08:00</updated>
  <id>http://jordanljesse.github.io/</id>
  <author>
    <name><![CDATA[Jordan Jesse]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting Started With Regular Expressions]]></title>
    <link href="http://jordanljesse.github.io/blog/2017/11/14/regular-expressions/"/>
    <updated>2017-11-14T11:02:07-05:00</updated>
    <id>http://jordanljesse.github.io/blog/2017/11/14/regular-expressions</id>
    <content type="html"><![CDATA[<p>Regular expressions, commonly referred to as “regex” or “regexp”, are a special kind of text string used for describing a search pattern for string data. Put simply, regular expressions find patterns in strings. Neat huh? This post will cover how to use regular expressions, considerations when using special characters, and character classes.<!--more--></p>

<p>Regular expressions are both confusing and powerful, and understanding them will definitely aid us in our programming endeavors. The concept of regular expressions originated in 1956 after <a href="https://en.wikipedia.org/wiki/Stephen_Cole_Kleene">Stephen Cole Kleene</a>, an American mathematician, created a formal description of <em>regular language</em> using his own mathematical notation called <em>regular sets</em>. Regular expressions are used to power search engines, text editor “find and replace” features, and even <a href="https://en.wikipedia.org/wiki/Lexical_analysis">lexical analysis</a>. However, we’re going to focus on regular expressions in the context of programming with JavaScript, and as such we’ll be using regular expressions with the string methods <code>search</code>, <code>replace</code>, <code>match</code>, and <code>split</code>. Additionally, we’re able to use regular expressions with the <code>test</code> and <code>exec</code> methods built into the <code>RegExp</code> object.</p>

<h3 id="using-regular-expressions">Using Regular Expressions</h3>
<p>There are two ways to write regular expressions: as a <em>regular expression literal</em> or by using the <code>RegExp</code> object constructor. The simplest regular expression would consist of a single character and find the first occurrence of that character in a string. Both of the regular expressions in the example below contain the same search pattern. 
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">reg1</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="err">“</span><span class="nx">a</span><span class="err">”</span><span class="p">);</span>     <span class="c1">// regex object; compiled at runtime</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">reg2</span> <span class="o">=</span> <span class="sr">/a/</span><span class="p">;</span>                 <span class="c1">// regex literal; compiled when script loads&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="err">“</span><span class="nx">Jack</span> <span class="nx">loves</span> <span class="nx">to</span> <span class="nx">eat</span> <span class="nx">at</span> <span class="nx">In</span><span class="o">-</span><span class="nx">N</span><span class="o">-</span><span class="nx">Out</span><span class="err">”</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">str</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">reg1</span><span class="p">,</span> <span class="err">“”</span><span class="p">));</span> <span class="c1">// “Jck loves to eat at In-N-Out” </span>
</span></code></pre></td></tr></table></div></figure>
Regular expression literals are compiled when the script that invokes them loads, whereas regex objects are compiled at run time. So how do we choose which regex syntax to use? If our regex pattern is going to remain <em>constant</em> then using a regex literal can help improve performance. Conversely, if our regex pattern is going to <em>change</em> or be pulled in from an external source(like user input) then we want to use the <code>RegExp</code> object consructor.</p>

<h3 id="special-characters">Special Characters</h3>
<p>It’s worth noting that there are some special considerations when it comes to using certain characters with the regular expression literal syntax. Because the regex pattern ends with a forward slash, any forward slash that we want to be <em>part of the search pattern</em> needs to be escaped with a backslash. Additionally, there are 12 characters that have special meanings in regular expressions and as such they also need to be escaped with a backslash if we want to use them as literals in a regex pattern:</p>

<ul>
  <li><code>?</code> question mark</li>
  <li><code>+</code> plus sign</li>
  <li><code>$</code> dollar sign</li>
  <li><code>*</code> asterisk</li>
  <li><code>/</code> backslash</li>
  <li><code>.</code> period</li>
  <li><code>|</code> pipe</li>
  <li><code>^</code> caret</li>
  <li><code>(</code> opening parenthesis</li>
  <li><code>)</code> closing parenthesis</li>
  <li><code>[</code> opening square bracket</li>
  <li><code>{</code> opening curly brace</li>
</ul>

<h3 id="character-classessets">Character Classes/Sets</h3>
<p>A character class(also referred to as a set) is a way to search for a specific character or set of characters out of various combinations of characters within a string. Say we wanted to find both American and British spellings of the word ‘grey’ using a regex pattern, we could construct our pattern using character classes as follows:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">isGrayOrGrey</span><span class="p">(</span><span class="nx">string</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">regex1</span> <span class="o">=</span> <span class="sr">/gr[ae]y/</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="nx">string</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">regex1</span><span class="p">);</span> <span class="c1">// returns array with match as first element }</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">isGrayOrGrey</span><span class="p">(</span><span class="err">“</span><span class="nx">gray</span><span class="err">”</span><span class="p">);</span>  <span class="c1">// [“gray”]</span>
</span><span class='line'><span class="nx">isGrayOrGrey</span><span class="p">(</span><span class="err">“</span><span class="nx">grey</span><span class="err">”</span><span class="p">);</span>  <span class="c1">// [“grey”]</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="nx">It</span><span class="s1">&#39;s worth noting that the order of characters in a character class doesn&#39;</span><span class="nx">t</span> <span class="nx">matter</span><span class="p">.</span> <span class="nx">Additionally</span><span class="p">,</span> <span class="nx">you</span> <span class="nx">can</span> <span class="nx">invert</span><span class="o">/</span><span class="nx">negate</span> <span class="nx">a</span> <span class="nx">character</span> <span class="kr">class</span> <span class="nx">by</span> <span class="nx">inserting</span> <span class="nx">a</span> <span class="nx">caret</span> <span class="nx">after</span> <span class="nx">the</span> <span class="nx">opening</span> <span class="nx">square</span> <span class="nx">bracket</span><span class="p">,</span> <span class="nx">resulting</span> <span class="k">in</span> <span class="nx">a</span> <span class="nx">regex</span> <span class="nx">pattern</span> <span class="nx">that</span> <span class="nx">finds</span> <span class="nx">any</span> <span class="nx">character</span> <span class="nx">that</span> <span class="nx">is</span> <span class="nx">_not_</span> <span class="k">in</span> <span class="nx">the</span> <span class="nx">character</span> <span class="kr">class</span><span class="p">.</span> <span class="nx">In</span> <span class="nx">the</span> <span class="nx">example</span> <span class="nx">below</span><span class="p">,</span> <span class="nx">the</span> <span class="kd">function</span> <span class="err">`</span><span class="nx">noZAfterA</span><span class="err">`</span> <span class="nx">returns</span> <span class="nx">an</span> <span class="nx">array</span> <span class="kd">with</span> <span class="nx">the</span> <span class="nx">matched</span> <span class="nx">regex</span> <span class="nx">pattern</span> <span class="nx">as</span> <span class="nx">its</span> <span class="nx">first</span> <span class="nx">element</span><span class="p">.</span> <span class="nx">The</span> <span class="nx">regex</span> <span class="nx">pattern</span> <span class="err">`</span><span class="nx">a</span><span class="p">[</span><span class="o">^</span><span class="nx">z</span><span class="p">]</span><span class="err">`</span> <span class="nx">matches</span> <span class="nx">the</span> <span class="err">`</span><span class="nx">ap</span><span class="err">`</span> <span class="k">in</span> <span class="err">`</span><span class="nx">apple</span><span class="err">`</span> <span class="nx">but</span> <span class="nx">it</span> <span class="nx">does</span> <span class="nx">_not_</span> <span class="nx">match</span> <span class="err">`</span><span class="nx">mocha</span><span class="err">`</span><span class="p">;</span> <span class="k">this</span> <span class="nx">is</span> <span class="nx">because</span> <span class="nx">there</span> <span class="nx">is</span> <span class="nx">no</span> <span class="nx">character</span> <span class="nx">after</span> <span class="nx">the</span> <span class="s1">&#39;a&#39;</span> <span class="k">for</span> <span class="nx">our</span> <span class="nx">pattern</span> <span class="nx">to</span> <span class="nx">match</span><span class="p">.</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;javascript</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">noZAfterA</span><span class="p">(</span><span class="nx">string</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">regex</span> <span class="o">=</span> <span class="sr">/a[^z]/</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">string</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">regex</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">noZAfterA</span><span class="p">(</span><span class="err">“</span><span class="nx">apple</span><span class="err">”</span><span class="p">);</span>  <span class="c1">// [“ap”]</span>
</span><span class='line'><span class="nx">noZAfterA</span><span class="p">(</span><span class="err">“</span><span class="nx">azure</span><span class="err">”</span><span class="p">);</span>  <span class="c1">// null</span>
</span><span class='line'><span class="nx">noZAfterA</span><span class="p">(</span><span class="err">“</span><span class="nx">mocha</span><span class="err">”</span><span class="p">);</span>  <span class="c1">// null</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3 id="conclusion">Conclusion</h3>
<p>Regular expressions ought to be part of every programmer’s toolkit and having a solid understanding of regex patterns and how to use them can empower us to search, filter, and validate(among other things) all manner of string data. In <em>Intermediate Regular Expressions</em> we will dig into more advanced regex patterns that include repeating patterns, shorthand for character classes, and using anchors to mark positions within a string.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dirty Checking vs. VDOM]]></title>
    <link href="http://jordanljesse.github.io/blog/2017/10/31/dirty-checking-vs-vdom/"/>
    <updated>2017-10-31T14:50:12-05:00</updated>
    <id>http://jordanljesse.github.io/blog/2017/10/31/dirty-checking-vs-vdom</id>
    <content type="html"><![CDATA[<p>What is the difference between updating the DOM using dirty checking and VDOM manipulation? Is one more efficient than the other? What the heck <em>is</em> the DOM? Let’s try to answer these questions!<!--more--></p>

<h3 id="what-is-the-dom">What is the DOM?</h3>
<p>To understand the differences between dirty checking and VDOM manipulation we first need to understand what the DOM is and isn’t.</p>

<h5 id="the-dom-is">The DOM is:</h5>
<ul>
  <li>a programming interface for HTML and XML documents</li>
  <li>an object-oriented representation of the HTML we wrote made up of nodes and objects</li>
  <li>automatically created from the HTML we wrote by the browser</li>
</ul>

<h5 id="the-dom-is-not">The DOM is not:</h5>
<ul>
  <li>the actual HTML we wrote</li>
  <li>the markup we see when we choose ‘view source’ on a page</li>
  <li>always the same as our HTML(browsers sometimes fix invalid markup behind the scenes)</li>
</ul>

<p>The DOM can be manipulated and edited using a scripting language like JavaScript including libraries and frameworks such as jQuery, Angular, and React. In fact, the DOM actually has its own API for interacting with other bits of code. Much of what is thought of as a “JavaScript thing” is actually a DOM API feature that allows us to interact with the DOM.</p>

<h3 id="dirty-checking">Dirty Checking</h3>
<p>Dirty checking is when our code loops through all of the node’s data at regular intervals for changes. It’s an inefficient way to update DOM elements as it requires recursively traversing every single node in the DOM to see if the node’s data is “dirty”(been changed). Compared to “Observable Checking”, where the individual components are responsible for listening to when changes take place in the state and communicating those changes, dirty checking is slow. A good example of this slowness would be updating a <code>li</code> in an unordered list: when dirty checking discovers the updated <code>li</code> it will actually re-render the entire unordered list; a very ineffecient operation.</p>

<h3 id="the-virtual-dom">The Virtual DOM</h3>
<p>The virtual DOM, or VDOM, is an abstraction of the DOM that is lightweight and can be updated without affecting the actual DOM. It has all of the same nodes, objects, and properties as the real DOM except without the ability to write to the screen. It’s worth noting that a new VDOM is created after every re-render of the UI. When using React a snapshot is made of the VDOM before applying any updates and this snapshot is used to compare against an updated VDOM. By comparing and contrasting the VDOM snapshot with the updated VDOM React is able to update only those elements that have been changed. Unlike the dirty checking example previously mentioned, VDOM manipulation will only update the node that’s been changed <em>without</em> having to update its parent element or containing list. This is what makes VDOM manipulation faster and more efficient than dirty checking.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac Backup Strategy]]></title>
    <link href="http://jordanljesse.github.io/blog/2017/09/30/mac-backup-strategy/"/>
    <updated>2017-09-30T22:18:25-05:00</updated>
    <id>http://jordanljesse.github.io/blog/2017/09/30/mac-backup-strategy</id>
    <content type="html"><![CDATA[<p>If you’re like me, then you probably store a lot of precious data on your digital devices: family photos, videos, music, fun projects, work projects, notes, and the like. When(it’s <em>definitely</em> when, not if) we experience a device failure/loss, the last thing we want to worry about is whether the data we’ve accumuated over the years, our digital life, is safe or not. Here is the backup strategy I use to make sure that when a computer fails it’s a minor inconvenience instead of a major headache(or heartache).
<!-- more --></p>

<h3 id="the-3-2-1-rule">The 3-2-1 Rule</h3>
<p>There is a rule for reliable digital backups called <a href="https://www.carbonite.com/en/cloud-backup/business/resources/carbonite-blog/what-is-3-2-1-backup/"><em>The 3-2-1 Rule</em></a> and it goes like this: for our data to be properly backed up it needs to exist in <em>three</em> places, on <em>two</em> seperate mediums, and with at least <em>one</em> backup offsite. So if we have a copy of our data on our laptop, an external hard drive, and in the cloud we can be pretty confident that our data is safe. Let’s dig into the tools to get this done!</p>

<h3 id="local-versioned-backups">Local Versioned Backups</h3>
<p>The first, and perhaps easiest to implement, backup we should make is a local versioned backup of our data. The <em>“local”</em> in local versioned backup means that the data exists locally, physically near us, and not offsite on some remote server or cloud service(Dropbox, iCloud, etc.). The <em>“versioned”</em> part means that our data is backed up incrementally and different versions of our data are maintained. A good use case for this would be if we have a project we’re working on and the files get corrupted, or we make a change that we’re not happy with and want to restore the project to an earlier version. With local versioned backups, we can do this!</p>

<p>One of the easiest ways to maintain local versioned backups of our data on a Mac is to use Apple’s own <a href="https://www.apple.com/in/support/timemachine/">Time Machine</a> software, which is included with every Mac. We open up <code>System Preferences</code>, select <code>Time Machine</code>, check the box labeled <code>Back Up Automatically</code>, and click on <code>Select Disk</code> to choose which disk we would like to use with Time Machine. It’s important to note that the disk we choose should <em>NOT</em> be our Mac’s startup disk - it should be a seperate disk. This is so that if our Mac were to fail or get lost our local versioned backup would remain intact, keeping our data safe. It’s worth mentioning that Time Machine only backs up our <em>data</em>(photos, videos, music, notes, etc.), <em>not</em> our applications or settings, which is where our second backup comes in.</p>

<h3 id="local-bootable-backups">Local Bootable Backups</h3>
<p>A local bootable backup is like the previous backup, except with two major differences: it backs up our <em>entire</em> hard drive including data, apps, and settings, and we can use it to boot up our computer. The <em>“bootable”</em> in local bootable backup means that we can take the drive that contains our backup, plug it into another computer, and boot from it. It is a clone of our system in its entirety. One of the shortcomings of this type of backup is that if we make a change to a project that we don’t like or a file gets messed up, those changes will get backed up to the local bootable backup as well. That is exactly why we keep a versioned backup <em>in addition to</em> a bootable backup.</p>

<p>For a bootable backup I use and highly recommend the application <a href="https://bombich.com"><em>Carbon Copy Cloner</em></a> by Bombich Software. After installing Carbon Copy Cloner, we select which disk we would like the application to use as a backup(again, one that is <em>seperate</em> from our startup disk), the schedule for our backup(I recommend daily), and click on the <code>clone</code> button.</p>

<h3 id="offsite-backups">Offsite Backups</h3>
<p>An offsite backup of our data is data that is literally <em>offsite</em> - it is located far away from our devices and backup drives. This is typically used as a worst case scenario backup, like if our house were subject to flood, fire, or theft. It would be nice to know that if we were unfortunate enough to lose everything that all of our data would be safe somewhere, and with an offsite backup this is possible.</p>

<p>For most people, one of the easiest ways to maintain an offsite backup is to use a service who’s mission is to keep our data backed up safely. Services like <a href="https://www.backblaze.com">Backblaze</a> can back up our entire computer to their servers(the cloud) and restore those files at our request.</p>

<p>For the more technically inclined, I use and recommend <a href="https://www.arqbackup.com">Arq</a> configured to back up our data to AWS Glacier servers, which have relatively low storage fees. Arq is essentially Time Machine for the cloud - it creates versioned backups of our data stored on a server of our choosing. As long as we have an internet connection our files are constantly being backed up to the cloud. However, unlike local backups, we will need to be connected to the internet to restore our files.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World!]]></title>
    <link href="http://jordanljesse.github.io/blog/2017/02/20/hello-world/"/>
    <updated>2017-02-20T19:20:20-05:00</updated>
    <id>http://jordanljesse.github.io/blog/2017/02/20/hello-world</id>
    <content type="html"><![CDATA[<p>Hey there! My name’s Jordan and I’m on a journey to learn how to code! This blog is a personal notebook of sorts to help me keep track of the things I’m learning and the tools I’m using. <!--more-->I’ve been coding as a hobby for a while now and recently I’ve decided to pursue becoming a professional developer. My goal is to get comfortable enough with the basics so that I can attend a coding bootcamp where I can find structure, comaraderie, and a mentor - and eventually get paid to learn!</p>

<p>So why start a blog? Why not? I spend a fair amount of time solving problems related to web development, developer tools, and computer maintenance and would like to document some of these endeavors with the hope that other developers might find something useful and save some time. Additionally, I want to be better about documenting my learning progress and projects so that in the future I can look back and see where I’ve been so that I can better appreciate where I am. With that said, welcome to my blog and feel free to share any questions/comments you might have. Cheers!</p>
]]></content>
  </entry>
  
</feed>
