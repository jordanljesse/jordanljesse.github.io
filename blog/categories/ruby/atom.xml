<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

<<<<<<< HEAD
  <title><![CDATA[Category: Ruby | Jordan Learns Code]]></title>
  <link href="http://jordanljesse.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://jordanljesse.github.io/"/>
  <updated>2017-09-18T23:38:16-07:00</updated>
=======
  <title><![CDATA[Category: Ruby, | Jordan Learns Code]]></title>
  <link href="http://jordanljesse.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://jordanljesse.github.io/"/>
  <updated>2017-06-07T20:38:07-05:00</updated>
>>>>>>> 7aa4f918ddee45f4ab5cdef4871c844e6722e6f2
  <id>http://jordanljesse.github.io/</id>
  <author>
    <name><![CDATA[Jordan Jesse]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
<<<<<<< HEAD
    <title type="html"><![CDATA[Managing Multiple Ruby Versions]]></title>
    <link href="http://jordanljesse.github.io/blog/2017/09/18/managing-multiple-ruby-versions/"/>
    <updated>2017-09-18T23:20:20-05:00</updated>
    <id>http://jordanljesse.github.io/blog/2017/09/18/managing-multiple-ruby-versions</id>
    <content type="html"><![CDATA[<p>The other day I decided to dust off this Octopress blog that I had started back in the Spring of this year to find that my <code>rake</code> tasks weren’t running properly. After a brief search of the web it seemed that outdated versions of Ruby were to blame. However, I still need to maintain these older versions of Ruby for other projects I’m working on. With that in mind, I set about learning how to manage multiple versions of Ruby on my Mac and stumbled across <a href="https://github.com/rbenv">rbenv</a>.
<!-- more --></p>

<p>First I’ll go over why I chose to use rbenv over similar tools like RVM and then get into how to install and use rbenv. The main reasons I choose to go with rbenv are:</p>

<ul>
  <li>it’s <em>light</em> compared to RVM</li>
  <li>I can set <em>application-specific Ruby versions</em></li>
  <li><em>no configuration file!</em></li>
  <li>easier to get set up and back to work</li>
</ul>

<p>What rbenv does is essentially create a sandboxed Ruby environment for our project in which we get to control which version of Ruby is run, separately from the version that may be the default for our system. To start using rbenv you’ll want to have Homebrew installed and up to date. After making sure that Homebrew is up to date you’re ready to install rbenv! You can see that rbenv also installs <a href="https://github.com/rbenv/ruby-build">ruby-build</a>, a plugin that allows us to install multiple versions of Ruby and enables rbenv to specify which version to use for the current project.
<code>bash
$ brew update
$ brew install rbenv ruby-build
</code></p>

<p>When the above completes, we’re ready to install our desired version(s) of Ruby by running:
<code>
$ rbenv install 2.4.2
</code></p>

<p>We’ll also need to run the following command to install the shims required for all the Ruby executables that rbenv is aware of. You’ll want to run the <code>rehash</code> command each time you install a new version of Ruby or a gem that provides commands.
<code>
$ rbenv rehash
</code></p>

<p>After restarting our terminal we should be able to specify which version of Ruby we’d like to run in our project by <code>cd</code>-ing into the root folder of the project and running the following command:
<code>
$ rbenv local 2.4.2
</code></p>

<p>You can verify the current active Ruby version by running either of the following commands:
<code>
$ rbenv version
</code></p>

<p>And that’s it! We’re now able to install and manage multiple versions of Ruby on a per-project basis with minimal fuss.</p>
=======
    <title type="html"><![CDATA[I Wrote My First Fibonacci Sequence in Ruby]]></title>
    <link href="http://jordanljesse.github.io/blog/2017/03/16/fibonacci-sequence-in-ruby/"/>
    <updated>2017-03-16T22:38:32-05:00</updated>
    <id>http://jordanljesse.github.io/blog/2017/03/16/fibonacci-sequence-in-ruby</id>
    <content type="html"><![CDATA[<p>So I’m teaching myself Ruby and today was all about solving some Euler problems. Euler problems are math problems at scale, so that they’re best done with a computer and a programming language(like Ruby). When I first looked at the problem, I had an idea of what was supposed to happen but was unsure of how to write the expression in Ruby.
<!-- more -->
Being a very visual person/learner, I found it helpful to write out the first few numbers of the Fibonacci sequence with pen and paper, and then to sketch in where the variables would go and how they move as the sequence progresses. Once I was able to visualize how the variables leapfrog each other within the loop and are added together for the next number in the Fibonacci sequence, it was much more clear how I needed to write the expression in Ruby. Sometimes you just need to sketch something to see the pattern. By outlining my problem and subsequent solution with pen and paper first, I was able to spend less time writing code. My Fibonacci sequence in Ruby(the solution to Euler Problem #2) looks like this:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, … By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">Euler</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;def initialize problem_number</span>
</span><span class='line'><span class="sr">    @numA = 1</span>
</span><span class='line'><span class="sr">    @numB = 0</span>
</span><span class='line'><span class="sr">    @fibonacci_number = 0</span>
</span><span class='line'><span class="sr">    @sum = 0</span>
</span><span class='line'><span class="sr">    puts &quot;Let&#39;s solve Euler problem #&quot; + problem_number.to_s + &quot;!&quot;</span>
</span><span class='line'><span class="sr">    self.fibonacci_sequence</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">def fibonacci_sequence</span>
</span><span class='line'><span class="sr">    while @fibonacci_number &amp;lt; 4000000</span>
</span><span class='line'><span class="sr">        @fibonacci_number = @numA + @numB</span>
</span><span class='line'><span class="sr">        puts &quot;fibonacci_number\&#39;s current value is &quot; + @fibonacci_number.to_s</span>
</span><span class='line'><span class="sr">        @numB = @numA</span>
</span><span class='line'><span class="sr">        @numA = @fibonacci_number</span>
</span><span class='line'><span class="sr">        @sum = @sum + @fibonacci_number</span>
</span><span class='line'><span class="sr">    end</span>
</span><span class='line'><span class="sr">    puts &quot;The sum of the Fibonacci sequence thus far is &quot; + @sum.to_s</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">euler_problem_2</span> <span class="o">=</span> <span class="no">Euler</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>
>>>>>>> 7aa4f918ddee45f4ab5cdef4871c844e6722e6f2
]]></content>
  </entry>
  
</feed>
